//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Inputs Actions/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""MainScheme"",
            ""id"": ""3220ae63-91c2-431b-8878-6f326ca05dad"",
            ""actions"": [
                {
                    ""name"": ""ClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""3ac09e99-5853-4e76-914c-fe5b7cc4783b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CounterClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""9c2092c3-a079-456d-83d0-ef92f3ae71da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchColumnsLineLeft"",
                    ""type"": ""Button"",
                    ""id"": ""bfbdc334-90fb-4ae4-baf7-bc9711bf7248"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchColumnsLineRight"",
                    ""type"": ""Button"",
                    ""id"": ""ae37ff05-363d-4227-a863-d23dae0366db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetRoom"",
                    ""type"": ""Button"",
                    ""id"": ""78276d6b-79fd-420a-8476-517d456cada6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a04cb8c7-d18f-472d-8156-0fb92a8155a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveOverlayCube"",
                    ""type"": ""Value"",
                    ""id"": ""2eb49cb9-f56f-4a6b-810e-4646888fd554"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShowStrips"",
                    ""type"": ""Button"",
                    ""id"": ""0f690b63-220d-4fba-bb73-64d9c7e24342"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GamePause"",
                    ""type"": ""Button"",
                    ""id"": ""bdf96abc-9325-4e69-a2e1-51ff4c1f6964"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d0045fc-563d-4af0-8ab4-3668efe26c64"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c496ed6-b0c7-4b00-92f4-0bf741f16882"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb90cf7c-9693-4f9a-befa-0ddc0c7eb815"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccc39771-3e5f-4d31-b672-1737daebaf39"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c5ac37-02a7-430b-9403-2e40968fd4d4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLineLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0325e2b3-18b3-46d2-888b-a85b89806fd0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""SwitchColumnsLineLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d15c155-8593-44ba-abde-ab03745d782c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLineRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0f3fde0-bba8-402c-97ce-ecf373fae50a"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ResetRoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a29658da-fd1c-4cfa-a817-acc8056bfdad"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ResetRoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02323f2f-ac41-4220-a812-269b51b04dce"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a58869a-454b-42ad-a735-514435f05137"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""25cde475-b607-4447-becc-6c5210bb0d4f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""1287c106-ee38-457c-83f5-9784436ce377"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""82cd4a22-4c09-4825-a5cc-65862e5a8fc4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""02215e61-805f-47e9-ab66-30ec0a03ed7d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5d614225-a126-483c-a3a0-a808998838d4"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4187aa92-c756-413c-94bb-bbae7f6dafed"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ShowStrips"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccab694f-2ab8-47cc-bc3f-8940fec7ae36"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ShowStrips"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aed6d1c9-f0ef-4677-848f-08e1d95185ed"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""GamePause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0fdf8ce-7a77-47e2-a09a-4223966cb870"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""GamePause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""a20e5998-df04-4a81-ac7d-f68055ce7b0d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""dd59c3ec-d4d8-4810-a337-dc1aae8c8b3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a6f4235f-4eb5-4b3f-8276-3b9b62e72abd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""de88368b-19c7-4edb-b35c-d85ca1f76c7f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8d189936-f14e-4658-b740-a5bf5e081c27"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""47ed3955-d82b-4a65-b28b-c5f33996259e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e9928a21-7175-4f52-aea8-f541dc2257eb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bef544ff-bfc9-493f-a9d9-f9e3eb27d0c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0510498b-b7e3-4ae5-85a0-8a572727073f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa6a9ab4-0d57-46db-a6de-024c12294877"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f0bf818-f1d2-4714-b0e1-d89b0b798df0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee1b49fc-6575-484b-baef-b8baf15df26b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b160170d-8414-4e79-86de-6a0bff4dcb7a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdfa5e52-0778-4fe7-9364-72a266f04e8b"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NoClip"",
            ""id"": ""3aa8d348-a1e9-433b-bf01-b1f174c77fcc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""59f107cb-0f59-45c8-b182-942f2a69fc22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a9377ed4-2696-4ba1-abfc-02eb9ca8e75c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e4d49587-94b5-4fc0-997e-0abae5ddf9ef"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""78cbc640-9a37-4349-9031-d1604bcd93bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b6c14ed6-3be5-4e2b-90c5-b8470b71d533"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50d32c53-1828-4e44-b574-575daa7fd728"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a3cb8173-c51e-4574-9812-158be7111b5f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""488da24b-4a75-4bc9-9c2a-f5da9ec12bdc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""067ce0f5-7be0-4162-8e79-769f65a5d26a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5ba81bf6-bc3a-4c98-b727-c736effa8ee1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""27987d0a-dcb3-477d-a5fa-21f5c68db369"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d7d7c1a1-350f-4e7a-b8ea-e2a6efaa000c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c2f14b14-8827-4238-8e53-995727ef74c5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0bd9e98d-6721-48ca-a8ea-b7482847f291"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a2270bb3-e773-4042-a9a0-1a289e97aa39"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""45e72c69-340a-4e38-92dd-45a7feb5e49f"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""06c8dac4-28de-4b12-ab14-2d359f208750"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LockPlayerMov"",
            ""id"": ""36e24ca8-43f0-4e9e-98b3-81b50699bd57"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainScheme
        m_MainScheme = asset.FindActionMap("MainScheme", throwIfNotFound: true);
        m_MainScheme_ClockWise = m_MainScheme.FindAction("ClockWise", throwIfNotFound: true);
        m_MainScheme_CounterClockWise = m_MainScheme.FindAction("CounterClockWise", throwIfNotFound: true);
        m_MainScheme_SwitchColumnsLineLeft = m_MainScheme.FindAction("SwitchColumnsLineLeft", throwIfNotFound: true);
        m_MainScheme_SwitchColumnsLineRight = m_MainScheme.FindAction("SwitchColumnsLineRight", throwIfNotFound: true);
        m_MainScheme_ResetRoom = m_MainScheme.FindAction("ResetRoom", throwIfNotFound: true);
        m_MainScheme_Interact = m_MainScheme.FindAction("Interact", throwIfNotFound: true);
        m_MainScheme_MoveOverlayCube = m_MainScheme.FindAction("MoveOverlayCube", throwIfNotFound: true);
        m_MainScheme_ShowStrips = m_MainScheme.FindAction("ShowStrips", throwIfNotFound: true);
        m_MainScheme_GamePause = m_MainScheme.FindAction("GamePause", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Crouch = m_PlayerMovement.FindAction("Crouch", throwIfNotFound: true);
        // NoClip
        m_NoClip = asset.FindActionMap("NoClip", throwIfNotFound: true);
        m_NoClip_Movement = m_NoClip.FindAction("Movement", throwIfNotFound: true);
        m_NoClip_VerticalMovement = m_NoClip.FindAction("VerticalMovement", throwIfNotFound: true);
        // LockPlayerMov
        m_LockPlayerMov = asset.FindActionMap("LockPlayerMov", throwIfNotFound: true);
    }

    ~@PlayerAction()
    {
        UnityEngine.Debug.Assert(!m_MainScheme.enabled, "This will cause a leak and performance issues, PlayerAction.MainScheme.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, PlayerAction.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_NoClip.enabled, "This will cause a leak and performance issues, PlayerAction.NoClip.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LockPlayerMov.enabled, "This will cause a leak and performance issues, PlayerAction.LockPlayerMov.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainScheme
    private readonly InputActionMap m_MainScheme;
    private List<IMainSchemeActions> m_MainSchemeActionsCallbackInterfaces = new List<IMainSchemeActions>();
    private readonly InputAction m_MainScheme_ClockWise;
    private readonly InputAction m_MainScheme_CounterClockWise;
    private readonly InputAction m_MainScheme_SwitchColumnsLineLeft;
    private readonly InputAction m_MainScheme_SwitchColumnsLineRight;
    private readonly InputAction m_MainScheme_ResetRoom;
    private readonly InputAction m_MainScheme_Interact;
    private readonly InputAction m_MainScheme_MoveOverlayCube;
    private readonly InputAction m_MainScheme_ShowStrips;
    private readonly InputAction m_MainScheme_GamePause;
    public struct MainSchemeActions
    {
        private @PlayerAction m_Wrapper;
        public MainSchemeActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClockWise => m_Wrapper.m_MainScheme_ClockWise;
        public InputAction @CounterClockWise => m_Wrapper.m_MainScheme_CounterClockWise;
        public InputAction @SwitchColumnsLineLeft => m_Wrapper.m_MainScheme_SwitchColumnsLineLeft;
        public InputAction @SwitchColumnsLineRight => m_Wrapper.m_MainScheme_SwitchColumnsLineRight;
        public InputAction @ResetRoom => m_Wrapper.m_MainScheme_ResetRoom;
        public InputAction @Interact => m_Wrapper.m_MainScheme_Interact;
        public InputAction @MoveOverlayCube => m_Wrapper.m_MainScheme_MoveOverlayCube;
        public InputAction @ShowStrips => m_Wrapper.m_MainScheme_ShowStrips;
        public InputAction @GamePause => m_Wrapper.m_MainScheme_GamePause;
        public InputActionMap Get() { return m_Wrapper.m_MainScheme; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainSchemeActions set) { return set.Get(); }
        public void AddCallbacks(IMainSchemeActions instance)
        {
            if (instance == null || m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Add(instance);
            @ClockWise.started += instance.OnClockWise;
            @ClockWise.performed += instance.OnClockWise;
            @ClockWise.canceled += instance.OnClockWise;
            @CounterClockWise.started += instance.OnCounterClockWise;
            @CounterClockWise.performed += instance.OnCounterClockWise;
            @CounterClockWise.canceled += instance.OnCounterClockWise;
            @SwitchColumnsLineLeft.started += instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineLeft.performed += instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineLeft.canceled += instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineRight.started += instance.OnSwitchColumnsLineRight;
            @SwitchColumnsLineRight.performed += instance.OnSwitchColumnsLineRight;
            @SwitchColumnsLineRight.canceled += instance.OnSwitchColumnsLineRight;
            @ResetRoom.started += instance.OnResetRoom;
            @ResetRoom.performed += instance.OnResetRoom;
            @ResetRoom.canceled += instance.OnResetRoom;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MoveOverlayCube.started += instance.OnMoveOverlayCube;
            @MoveOverlayCube.performed += instance.OnMoveOverlayCube;
            @MoveOverlayCube.canceled += instance.OnMoveOverlayCube;
            @ShowStrips.started += instance.OnShowStrips;
            @ShowStrips.performed += instance.OnShowStrips;
            @ShowStrips.canceled += instance.OnShowStrips;
            @GamePause.started += instance.OnGamePause;
            @GamePause.performed += instance.OnGamePause;
            @GamePause.canceled += instance.OnGamePause;
        }

        private void UnregisterCallbacks(IMainSchemeActions instance)
        {
            @ClockWise.started -= instance.OnClockWise;
            @ClockWise.performed -= instance.OnClockWise;
            @ClockWise.canceled -= instance.OnClockWise;
            @CounterClockWise.started -= instance.OnCounterClockWise;
            @CounterClockWise.performed -= instance.OnCounterClockWise;
            @CounterClockWise.canceled -= instance.OnCounterClockWise;
            @SwitchColumnsLineLeft.started -= instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineLeft.performed -= instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineLeft.canceled -= instance.OnSwitchColumnsLineLeft;
            @SwitchColumnsLineRight.started -= instance.OnSwitchColumnsLineRight;
            @SwitchColumnsLineRight.performed -= instance.OnSwitchColumnsLineRight;
            @SwitchColumnsLineRight.canceled -= instance.OnSwitchColumnsLineRight;
            @ResetRoom.started -= instance.OnResetRoom;
            @ResetRoom.performed -= instance.OnResetRoom;
            @ResetRoom.canceled -= instance.OnResetRoom;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MoveOverlayCube.started -= instance.OnMoveOverlayCube;
            @MoveOverlayCube.performed -= instance.OnMoveOverlayCube;
            @MoveOverlayCube.canceled -= instance.OnMoveOverlayCube;
            @ShowStrips.started -= instance.OnShowStrips;
            @ShowStrips.performed -= instance.OnShowStrips;
            @ShowStrips.canceled -= instance.OnShowStrips;
            @GamePause.started -= instance.OnGamePause;
            @GamePause.performed -= instance.OnGamePause;
            @GamePause.canceled -= instance.OnGamePause;
        }

        public void RemoveCallbacks(IMainSchemeActions instance)
        {
            if (m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainSchemeActions instance)
        {
            foreach (var item in m_Wrapper.m_MainSchemeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainSchemeActions @MainScheme => new MainSchemeActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Crouch;
    public struct PlayerMovementActions
    {
        private @PlayerAction m_Wrapper;
        public PlayerMovementActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Crouch => m_Wrapper.m_PlayerMovement_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // NoClip
    private readonly InputActionMap m_NoClip;
    private List<INoClipActions> m_NoClipActionsCallbackInterfaces = new List<INoClipActions>();
    private readonly InputAction m_NoClip_Movement;
    private readonly InputAction m_NoClip_VerticalMovement;
    public struct NoClipActions
    {
        private @PlayerAction m_Wrapper;
        public NoClipActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_NoClip_Movement;
        public InputAction @VerticalMovement => m_Wrapper.m_NoClip_VerticalMovement;
        public InputActionMap Get() { return m_Wrapper.m_NoClip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NoClipActions set) { return set.Get(); }
        public void AddCallbacks(INoClipActions instance)
        {
            if (instance == null || m_Wrapper.m_NoClipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NoClipActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @VerticalMovement.started += instance.OnVerticalMovement;
            @VerticalMovement.performed += instance.OnVerticalMovement;
            @VerticalMovement.canceled += instance.OnVerticalMovement;
        }

        private void UnregisterCallbacks(INoClipActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @VerticalMovement.started -= instance.OnVerticalMovement;
            @VerticalMovement.performed -= instance.OnVerticalMovement;
            @VerticalMovement.canceled -= instance.OnVerticalMovement;
        }

        public void RemoveCallbacks(INoClipActions instance)
        {
            if (m_Wrapper.m_NoClipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INoClipActions instance)
        {
            foreach (var item in m_Wrapper.m_NoClipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NoClipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NoClipActions @NoClip => new NoClipActions(this);

    // LockPlayerMov
    private readonly InputActionMap m_LockPlayerMov;
    private List<ILockPlayerMovActions> m_LockPlayerMovActionsCallbackInterfaces = new List<ILockPlayerMovActions>();
    public struct LockPlayerMovActions
    {
        private @PlayerAction m_Wrapper;
        public LockPlayerMovActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_LockPlayerMov; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LockPlayerMovActions set) { return set.Get(); }
        public void AddCallbacks(ILockPlayerMovActions instance)
        {
            if (instance == null || m_Wrapper.m_LockPlayerMovActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LockPlayerMovActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(ILockPlayerMovActions instance)
        {
        }

        public void RemoveCallbacks(ILockPlayerMovActions instance)
        {
            if (m_Wrapper.m_LockPlayerMovActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILockPlayerMovActions instance)
        {
            foreach (var item in m_Wrapper.m_LockPlayerMovActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LockPlayerMovActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LockPlayerMovActions @LockPlayerMov => new LockPlayerMovActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IMainSchemeActions
    {
        void OnClockWise(InputAction.CallbackContext context);
        void OnCounterClockWise(InputAction.CallbackContext context);
        void OnSwitchColumnsLineLeft(InputAction.CallbackContext context);
        void OnSwitchColumnsLineRight(InputAction.CallbackContext context);
        void OnResetRoom(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMoveOverlayCube(InputAction.CallbackContext context);
        void OnShowStrips(InputAction.CallbackContext context);
        void OnGamePause(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface INoClipActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnVerticalMovement(InputAction.CallbackContext context);
    }
    public interface ILockPlayerMovActions
    {
    }
}
