//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Inputs Actions/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""MainScheme"",
            ""id"": ""3220ae63-91c2-431b-8878-6f326ca05dad"",
            ""actions"": [
                {
                    ""name"": ""ClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""3ac09e99-5853-4e76-914c-fe5b7cc4783b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CounterClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""9c2092c3-a079-456d-83d0-ef92f3ae71da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchColumnsLine"",
                    ""type"": ""Button"",
                    ""id"": ""bfbdc334-90fb-4ae4-baf7-bc9711bf7248"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetRoom"",
                    ""type"": ""Button"",
                    ""id"": ""78276d6b-79fd-420a-8476-517d456cada6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a04cb8c7-d18f-472d-8156-0fb92a8155a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveOverlayCube"",
                    ""type"": ""Value"",
                    ""id"": ""2eb49cb9-f56f-4a6b-810e-4646888fd554"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d0045fc-563d-4af0-8ab4-3668efe26c64"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c496ed6-b0c7-4b00-92f4-0bf741f16882"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb90cf7c-9693-4f9a-befa-0ddc0c7eb815"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccc39771-3e5f-4d31-b672-1737daebaf39"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c5ac37-02a7-430b-9403-2e40968fd4d4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55fcbdcc-331a-4126-a400-65a65315e4a2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0325e2b3-18b3-46d2-888b-a85b89806fd0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0f3fde0-bba8-402c-97ce-ecf373fae50a"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ResetRoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a29658da-fd1c-4cfa-a817-acc8056bfdad"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ResetRoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02323f2f-ac41-4220-a812-269b51b04dce"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a58869a-454b-42ad-a735-514435f05137"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""25cde475-b607-4447-becc-6c5210bb0d4f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""1287c106-ee38-457c-83f5-9784436ce377"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""82cd4a22-4c09-4825-a5cc-65862e5a8fc4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""02215e61-805f-47e9-ab66-30ec0a03ed7d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5d614225-a126-483c-a3a0-a808998838d4"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveOverlayCube"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainScheme
        m_MainScheme = asset.FindActionMap("MainScheme", throwIfNotFound: true);
        m_MainScheme_ClockWise = m_MainScheme.FindAction("ClockWise", throwIfNotFound: true);
        m_MainScheme_CounterClockWise = m_MainScheme.FindAction("CounterClockWise", throwIfNotFound: true);
        m_MainScheme_SwitchColumnsLine = m_MainScheme.FindAction("SwitchColumnsLine", throwIfNotFound: true);
        m_MainScheme_ResetRoom = m_MainScheme.FindAction("ResetRoom", throwIfNotFound: true);
        m_MainScheme_Interact = m_MainScheme.FindAction("Interact", throwIfNotFound: true);
        m_MainScheme_MoveOverlayCube = m_MainScheme.FindAction("MoveOverlayCube", throwIfNotFound: true);
    }

    ~@PlayerAction()
    {
        UnityEngine.Debug.Assert(!m_MainScheme.enabled, "This will cause a leak and performance issues, PlayerAction.MainScheme.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainScheme
    private readonly InputActionMap m_MainScheme;
    private List<IMainSchemeActions> m_MainSchemeActionsCallbackInterfaces = new List<IMainSchemeActions>();
    private readonly InputAction m_MainScheme_ClockWise;
    private readonly InputAction m_MainScheme_CounterClockWise;
    private readonly InputAction m_MainScheme_SwitchColumnsLine;
    private readonly InputAction m_MainScheme_ResetRoom;
    private readonly InputAction m_MainScheme_Interact;
    private readonly InputAction m_MainScheme_MoveOverlayCube;
    public struct MainSchemeActions
    {
        private @PlayerAction m_Wrapper;
        public MainSchemeActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClockWise => m_Wrapper.m_MainScheme_ClockWise;
        public InputAction @CounterClockWise => m_Wrapper.m_MainScheme_CounterClockWise;
        public InputAction @SwitchColumnsLine => m_Wrapper.m_MainScheme_SwitchColumnsLine;
        public InputAction @ResetRoom => m_Wrapper.m_MainScheme_ResetRoom;
        public InputAction @Interact => m_Wrapper.m_MainScheme_Interact;
        public InputAction @MoveOverlayCube => m_Wrapper.m_MainScheme_MoveOverlayCube;
        public InputActionMap Get() { return m_Wrapper.m_MainScheme; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainSchemeActions set) { return set.Get(); }
        public void AddCallbacks(IMainSchemeActions instance)
        {
            if (instance == null || m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Add(instance);
            @ClockWise.started += instance.OnClockWise;
            @ClockWise.performed += instance.OnClockWise;
            @ClockWise.canceled += instance.OnClockWise;
            @CounterClockWise.started += instance.OnCounterClockWise;
            @CounterClockWise.performed += instance.OnCounterClockWise;
            @CounterClockWise.canceled += instance.OnCounterClockWise;
            @SwitchColumnsLine.started += instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.performed += instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.canceled += instance.OnSwitchColumnsLine;
            @ResetRoom.started += instance.OnResetRoom;
            @ResetRoom.performed += instance.OnResetRoom;
            @ResetRoom.canceled += instance.OnResetRoom;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MoveOverlayCube.started += instance.OnMoveOverlayCube;
            @MoveOverlayCube.performed += instance.OnMoveOverlayCube;
            @MoveOverlayCube.canceled += instance.OnMoveOverlayCube;
        }

        private void UnregisterCallbacks(IMainSchemeActions instance)
        {
            @ClockWise.started -= instance.OnClockWise;
            @ClockWise.performed -= instance.OnClockWise;
            @ClockWise.canceled -= instance.OnClockWise;
            @CounterClockWise.started -= instance.OnCounterClockWise;
            @CounterClockWise.performed -= instance.OnCounterClockWise;
            @CounterClockWise.canceled -= instance.OnCounterClockWise;
            @SwitchColumnsLine.started -= instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.performed -= instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.canceled -= instance.OnSwitchColumnsLine;
            @ResetRoom.started -= instance.OnResetRoom;
            @ResetRoom.performed -= instance.OnResetRoom;
            @ResetRoom.canceled -= instance.OnResetRoom;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MoveOverlayCube.started -= instance.OnMoveOverlayCube;
            @MoveOverlayCube.performed -= instance.OnMoveOverlayCube;
            @MoveOverlayCube.canceled -= instance.OnMoveOverlayCube;
        }

        public void RemoveCallbacks(IMainSchemeActions instance)
        {
            if (m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainSchemeActions instance)
        {
            foreach (var item in m_Wrapper.m_MainSchemeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainSchemeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainSchemeActions @MainScheme => new MainSchemeActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IMainSchemeActions
    {
        void OnClockWise(InputAction.CallbackContext context);
        void OnCounterClockWise(InputAction.CallbackContext context);
        void OnSwitchColumnsLine(InputAction.CallbackContext context);
        void OnResetRoom(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMoveOverlayCube(InputAction.CallbackContext context);
    }
}
