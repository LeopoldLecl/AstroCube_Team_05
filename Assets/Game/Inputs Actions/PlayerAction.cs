//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Game/Inputs Actions/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""NicoScheme"",
            ""id"": ""3220ae63-91c2-431b-8878-6f326ca05dad"",
            ""actions"": [
                {
                    ""name"": ""ClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""3ac09e99-5853-4e76-914c-fe5b7cc4783b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CounterClockWise"",
                    ""type"": ""Button"",
                    ""id"": ""9c2092c3-a079-456d-83d0-ef92f3ae71da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchColumnsLine"",
                    ""type"": ""Button"",
                    ""id"": ""bfbdc334-90fb-4ae4-baf7-bc9711bf7248"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d0045fc-563d-4af0-8ab4-3668efe26c64"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c496ed6-b0c7-4b00-92f4-0bf741f16882"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb90cf7c-9693-4f9a-befa-0ddc0c7eb815"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccc39771-3e5f-4d31-b672-1737daebaf39"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""CounterClockWise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c5ac37-02a7-430b-9403-2e40968fd4d4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55fcbdcc-331a-4126-a400-65a65315e4a2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0325e2b3-18b3-46d2-888b-a85b89806fd0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchColumnsLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // NicoScheme
        m_NicoScheme = asset.FindActionMap("NicoScheme", throwIfNotFound: true);
        m_NicoScheme_ClockWise = m_NicoScheme.FindAction("ClockWise", throwIfNotFound: true);
        m_NicoScheme_CounterClockWise = m_NicoScheme.FindAction("CounterClockWise", throwIfNotFound: true);
        m_NicoScheme_SwitchColumnsLine = m_NicoScheme.FindAction("SwitchColumnsLine", throwIfNotFound: true);
    }

    ~@PlayerAction()
    {
        UnityEngine.Debug.Assert(!m_NicoScheme.enabled, "This will cause a leak and performance issues, PlayerAction.NicoScheme.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NicoScheme
    private readonly InputActionMap m_NicoScheme;
    private List<INicoSchemeActions> m_NicoSchemeActionsCallbackInterfaces = new List<INicoSchemeActions>();
    private readonly InputAction m_NicoScheme_ClockWise;
    private readonly InputAction m_NicoScheme_CounterClockWise;
    private readonly InputAction m_NicoScheme_SwitchColumnsLine;
    public struct NicoSchemeActions
    {
        private @PlayerAction m_Wrapper;
        public NicoSchemeActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClockWise => m_Wrapper.m_NicoScheme_ClockWise;
        public InputAction @CounterClockWise => m_Wrapper.m_NicoScheme_CounterClockWise;
        public InputAction @SwitchColumnsLine => m_Wrapper.m_NicoScheme_SwitchColumnsLine;
        public InputActionMap Get() { return m_Wrapper.m_NicoScheme; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NicoSchemeActions set) { return set.Get(); }
        public void AddCallbacks(INicoSchemeActions instance)
        {
            if (instance == null || m_Wrapper.m_NicoSchemeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NicoSchemeActionsCallbackInterfaces.Add(instance);
            @ClockWise.started += instance.OnClockWise;
            @ClockWise.performed += instance.OnClockWise;
            @ClockWise.canceled += instance.OnClockWise;
            @CounterClockWise.started += instance.OnCounterClockWise;
            @CounterClockWise.performed += instance.OnCounterClockWise;
            @CounterClockWise.canceled += instance.OnCounterClockWise;
            @SwitchColumnsLine.started += instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.performed += instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.canceled += instance.OnSwitchColumnsLine;
        }

        private void UnregisterCallbacks(INicoSchemeActions instance)
        {
            @ClockWise.started -= instance.OnClockWise;
            @ClockWise.performed -= instance.OnClockWise;
            @ClockWise.canceled -= instance.OnClockWise;
            @CounterClockWise.started -= instance.OnCounterClockWise;
            @CounterClockWise.performed -= instance.OnCounterClockWise;
            @CounterClockWise.canceled -= instance.OnCounterClockWise;
            @SwitchColumnsLine.started -= instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.performed -= instance.OnSwitchColumnsLine;
            @SwitchColumnsLine.canceled -= instance.OnSwitchColumnsLine;
        }

        public void RemoveCallbacks(INicoSchemeActions instance)
        {
            if (m_Wrapper.m_NicoSchemeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INicoSchemeActions instance)
        {
            foreach (var item in m_Wrapper.m_NicoSchemeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NicoSchemeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NicoSchemeActions @NicoScheme => new NicoSchemeActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface INicoSchemeActions
    {
        void OnClockWise(InputAction.CallbackContext context);
        void OnCounterClockWise(InputAction.CallbackContext context);
        void OnSwitchColumnsLine(InputAction.CallbackContext context);
    }
}
